type User {
    "User entered properties"
    firstName: String
    lastName: String
    organization: String

    "System determined properties"
    userID: ID
    email: String
    IDP: String
    "admin, member (has ever been granted any accesses), non-member (never granted any access)"
    role: String
    "empty string (login only), inactive (all accesses revoked), active, disabled, deleted"
    userStatus: String

    creationDate: String
    editDate: String

    acl: [Access]
}

type UserInfo {
    "User entered properties"
    firstName: String
    lastName: String
    displayName: String
    organization: String

    "System determined properties"
    userID: ID
    email: String
    IDP: String
    "admin, member (has ever been granted any accesses), non-member (never granted any access)"
    role: String
    "null (login only), inactive (all accesses revoked), active, disabled, deleted"
    userStatus: String

    creationDate: String
    editDate: String

    numberOfArms: Int
    acl: [Access]
}

type Access {
    armID: String
    armName: String
    "pending, approved, rejected, revoked"
    accessStatus: String
    requestDate: String
    "Name of the admin who approved/rejected this access"
    reviewAdminName: String
    reviewDate: String
    comment: String
    requestID: ID
}

input RequestAccessInput {
    firstName: String
    lastName: String
    organization: String
    armIDs: [String]
}

input UpdateUserInput {
    firstName: String
    lastName: String
    organization: String
}

type Arm {
    name: String
    id: String
}

type UserRequest {
    firstName: String
    lastName: String
    displayName: String
    organization: String
    userID: ID
    email: String
    IDP: String
    role: String
    userStatus: String
    numberOfArms: Int
    requestID: ID
    acl: [Access]
}

type Query {
    "Admin only"
    listUsers(role: [String] = [], userStatus: [String] = [], accessStatus: [String] = []): [UserInfo]
    listRequest(accessStatus: [String] = ["pending"], requestID: [ID] = []): [UserRequest]
    getUser(userID: ID!): User
    "Limit to current user only"
    getMyUser : User

    "Open to any authenticated users"
    listArms: [Arm]
}

type Mutation {
    "User initiated operations"
    requestAccess (userInfo: RequestAccessInput!): User
    updateMyUser (userInfo: UpdateUserInput!): User

    "Admin only operations"
    approveAccess (userID: ID!, armIDs: [String]!, comment: String = ""): [Access]
    rejectAccess (userID: ID!, armIDs: [String]!, comment: String!): [Access]
    revokeAccess (userID: ID!, armIDs: [String]!, comment: String!): [Access]
    editUser(userID: ID!, role: String, userStatus: String): User
#    deleteUser (userID: ID!): User
#    disableUser (userID: ID!): User
}
